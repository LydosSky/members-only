doctype html
html
  include includes/head.pug
  body
    include includes/nav.pug
    .container.vh-100.d-flex.justify-content-center.align-items-center
      if formName === 'sign-up'
        include includes/sign-up-form.pug
      else if formName === 'log-in'
        include includes/log-in-form.pug
      else if formName === 'create-post'
        include includes/create-post-form.pug
      else if formName === 'member'
        include includes/member-form.pug
    .toast(role='alert', arial-live='assertive', aria-atomic='true')
      .toast-header
        svg.bd-placeholder-img.rounded.me-2(
          width='20',
          height='20',
          xmlns='http://www.w3.org/2000/svg',
          aria-hidden='true',
          preserveAspectRatio='xMidYMid slice',
          focusable='false'
        )
          rect(width='100%', height='100%', fill='#ff0000')
        strong.me-auto Error
        button.btn-close(
          type=button,
          data-bs-dismiss='toast',
          aria-label='Close'
        )
      .toast-body

    #server-errors.d-none(data-errors=JSON.stringify(errors))
    script(defer).
      // Directly taken from bootstrap documentation
      // https://getbootstrap.com/docs/5.3/forms/validation/#custom-styles
      (() => {
        'use strict';

        // Fetch all the forms we want to apply custom Bootstrap validation styles to
        const forms = document.querySelectorAll('.needs-validation');

        // Loop over them and prevent submission
        Array.from(forms).forEach((form) => {
          form.addEventListener(
            'submit',
            (event) => {
              if (!form.checkValidity()) {
                event.preventDefault();
                event.stopPropagation();
              }
              form.classList.add('was-validated');
            },
            false,
          );
        });
      })();
      // TODO: This will be fixed later for errors coming from database
      // for unique fields email and username
      (function () {
        const errorsJson = document.getElementById('server-errors').dataset.errors;
        const errors = JSON.parse(errorsJson);
        if (errors.length > 0) {
          errors.forEach((error) => {
            const input = document.getElementById(error.path);
            if (input) {
              input.classList.add('is-invalid');
            }
          });
        }
      })();
